//Checks if the light is visible
bool is_light_visible(const Vector3d &ray_origin, const Vector3d &ray_direction, const Vector3d &light_position)
{
    // TODO: Determine if the light is visible here
    // Use find_nearest_object
    Vector3d p, N;
    double t_light = (light_position - ray_origin).norm();

    // Find the nearest object hit by the ray
    int nearest_object = find_nearest_object(ray_origin, ray_direction, p, N);

    if (nearest_object < 0)
    {
        // If no object is hit, the light is visible
        return true;
    }
    else
    {
        // Calculate distance from ray_origin to the hit point
        double t_object = (p - ray_origin).norm();

        // If the hit point is closer than the light, the light is not visible
        return t_object >= t_light;
    }
}

Vector4d shoot_ray(const Vector3d &ray_origin, const Vector3d &ray_direction, int max_bounce)
{
    //Intersection point and normal, these are output of find_nearest_object
    Vector3d p, N;

    const int nearest_object = find_nearest_object(ray_origin, ray_direction, p, N);

    if (nearest_object < 0)
    {
        // Return a transparent color
        return Vector4d(0, 0, 0, 0);
    }

    // Ambient light contribution
    const Vector4d ambient_color = obj_ambient_color.array() * ambient_light.array();

    // Punctual lights contribution (direct lighting)
    Vector4d lights_color(0, 0, 0, 0);
    for (int i = 0; i < light_positions.size(); ++i)
    {
        const Vector3d &light_position = light_positions[i];
        const Vector4d &light_color = light_colors[i];

        const Vector3d Li = (light_position - p).normalized();

        // TODO: Shoot a shadow ray to determine if the light should affect the intersection point and call is_light_visible
        Vector3d shadow_ray_direction = Li;

        if (is_light_visible(p, Li, light_position))
        {
            // Diffuse
            double diffuse_coefficient = std::max(0.0, Li.dot(N));
            Vector4d diffuse_color = obj_diffuse_color * diffuse_coefficient;

            // Specular
            Vector3d R = (2 * (Li.dot(N)) * N - Li).normalized();  // reflection direction
            double specular_coefficient = pow(std::max(0.0, R.dot(-ray_direction)), obj_specular_exponent);
            Vector4d specular_color = obj_specular_color * specular_coefficient;

            // Combine
            lights_color += (diffuse_color + specular_color).cwiseProduct(light_color) / (light_position - p).squaredNorm();
        }
        
        Vector4d diff_color = obj_diffuse_color;

        if (nearest_object == 4)
        {
            //Compute UV coodinates for the point on the sphere
            const double x = p(0) - sphere_centers[nearest_object][0];
            const double y = p(1) - sphere_centers[nearest_object][1];
            const double z = p(2) - sphere_centers[nearest_object][2];
            double tu = acos(z / sphere_radii[nearest_object]) / 3.1415;
            double tv = (3.1415 + atan2(y, x)) / (2 * 3.1415);
            tu = std::min(tu, 1.0);
            tu = std::max(tu, 0.0);

            tv = std::min(tv, 1.0);
            tv = std::max(tv, 0.0);

            diff_color = procedural_texture(tu, tv);
        }

        // TODO: Add shading parameters

        // Diffuse contribution
        const Vector4d diffuse = diff_color * std::max(Li.dot(N), 0.0);

        // Specular contribution, use obj_specular_color
        Vector3d R = (2 * (Li.dot(N)) * N - Li).normalized();
        const Vector4d specular = obj_specular_color * pow(std::max(R.dot(-ray_direction), 0.0), obj_specular_exponent);

        // Attenuate lights according to the squared distance to the lights
        const Vector3d D = light_position - p;
        lights_color += (diffuse + specular).cwiseProduct(light_color) / D.squaredNorm();
    }

    Vector4d refl_color = obj_reflection_color;
    if (nearest_object == 4)
    {
        refl_color = Vector4d(0.5, 0.5, 0.5, 0);
    }
    // TODO: Compute the color of the reflected ray and add its contribution to the current point color.
    // use refl_color
    Vector4d reflection_color(0, 0, 0, 0);
    if (max_bounce > 0)
    {
        Vector3d R = ray_direction - 2 * (ray_direction.dot(N)) * N;
        reflection_color = obj_reflection_color.array() * shoot_ray(p + R * 0.0001, R, max_bounce - 1).array();
    }

    // TODO: Compute the color of the refracted ray and add its contribution to the current point color.
    //       Make sure to check for total internal reflection before shooting a new ray.
    Vector4d refraction_color(0, 0, 0, 0);

    // Rendering equation
    Vector4d C = ambient_color + lights_color + reflection_color + refraction_color;

    //Set alpha to 1
    C(3) = 1;

    return C;
}